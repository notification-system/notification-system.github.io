<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nosy Docs â€“ Documentation</title>
    <link>http://notification-system.github.io/docs/</link>
    <description>Recent Hugo news from gohugo.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <image>
      <url>http://notification-system.github.io/img/hugo.png</url>
      <title>GoHugo.io</title>
      <link>http://notification-system.github.io/docs/</link>
    </image>
    
	  <atom:link href="http://notification-system.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Documentation instructions</title>
      <link>http://notification-system.github.io/docs/instructions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://notification-system.github.io/docs/instructions/</guid>
      <description>
        
        
        

&lt;p&gt;Just like any part of our projects any pull requests/issues created for our documentation is much appreciated.&lt;/p&gt;

&lt;p&gt;Before updating the documentation please run our spell checker.
We have two ways, ether installing npm locally on your computer or using docker&lt;/p&gt;

&lt;h2 id=&#34;npm-spell-checker&#34;&gt;npm spell checker&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install the yaspeller-ci npm package
npm install

# Run the spellcheck application
npm run spellcheck
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;docker-spell-checker&#34;&gt;Docker spell checker&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the spellcheck docker file
docker build -t spellchecker:latest -f Dockerfile-spellcheck .

# Run the docker image
docker run -it spellchecker

# If you easily want to run spellchecker without re-building mount your local dir as a volume
docker run -v $PWD:/scripts -it spellchecker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you find any issues please correct them.
If we are missing any words in our local dictionary feel free to add them to .yaspellerrc&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Configuration</title>
      <link>http://notification-system.github.io/docs/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://notification-system.github.io/docs/configuration/</guid>
      <description>
        
        
        

&lt;h3 id=&#34;step-one&#34;&gt;&lt;strong&gt;Step One&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;We start configuring nosy-admin. Configuration is pretty straightforward, if you recall Architecture page Nosy admin is protected by Keycloak and using PostgreSQL database for persisting data. Besides that we use Kafka Topics to communicate between components. So all configurations are related to those features will be configured via environment variables.&lt;/p&gt;

&lt;h4 id=&#34;nosy-admin-configuration&#34;&gt;&lt;strong&gt;Nosy Admin Configuration&lt;/strong&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;NOSY_FROM_ADDRESS=xxx@xxx.com
DATASOURCE_URL=jdbc:postgresql://xxxxx:5432/nosydb
DATASOURCE_USERNAME=xxxxx
DATASOURCE_PASSWORD=xxxxx
KAFKA_BROKER_URL=xxxxxx:xxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s investigate each of these fields in detail&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NOSY_FROM_ADDRESS=xxx@xxx.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Above mentioned environment variable specifies what will be the default mail sender address. Keep in mind that in Nosy you can also configure default mail server address which can be linked to a private mail server. In addition you can use two more options: Gmail and Yandex. If you prefer to send emails from your private email address then this field should be initialized to your email server address. For example: test@example.com&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DATASOURCE_URL=jdbc:postgresql://xxxxx:5432/nosydb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Above mentioned field specifies the address, port and database of postgress server. For example: jdbc:postgresql://127.0.0.1:5432/nosydb&lt;/p&gt;

&lt;p&gt;&lt;code&gt;KAFKA_BROKER_URL=xxxxxx:xxxxx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Above mentioned field specifies the address and port of Kafka broker for streaming. For example: example.com:9092&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DATASOURCE_USERNAME=xxxxx
DATASOURCE_PASSWORD=xxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above mentioned environment variables specify the username, password for postgres database. For example: username: nosy, password: nosy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;KEYCLOAK_ADMIN_USER=xxxxxx
KEYCLOAK_ADMIN_PASSWORD=xxxxx
KEYCLOAK_CLIENT=xxxxx
KEYCLOAK_AUTH_URL=xxxxxxx
KEYCLOAK_REALM=xxxxxxxx
KEYCLOAK_CLIENT_SECRET=xxx-xxx-xxx-xxxxx-xxx
KEYCLOAK_AUTH_URL=http://xxxxxx/xxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All environment variables mentioned above are related to Keycloak. We will cover configurations of Keycloak in the next section but let&amp;rsquo;s first discuss what each field means in terms of configurations in nosy-admin. The first two fields are the admin user and password for specific client. For example: nosy-client-admin, password: xxxxxx. keycloak.resource is client name of nosy(e.g. nosy-client). keycloak.auth-server-url is the url to keycloak auth(e.g. &lt;a href=&#34;https://example.com:8080/auth&#34;&gt;https://example.com:8080/auth&lt;/a&gt;). keycloak.realm is the realm for nosy(e.g nosy-realm) nosy.client.clientSecret is the secret for keycloak.resource(xxxx-xxxxx-xxxx-xxxx). We will talk about it later in keycloak section.&lt;/p&gt;

&lt;h3 id=&#34;step-two&#34;&gt;&lt;strong&gt;Step Two&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&#34;keycloak-configuration-for-nosy-admin&#34;&gt;&lt;strong&gt;Keycloak configuration for nosy-admin&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;This section will talk about keycloak configurations we need to do in order to make nosy-admin work. Keycloak is open source readhat IAM. You can refer to documentation of Keycloak by going to the following link: Keycloak Docs For api specs please refer to: Keycloak API Spec&lt;/p&gt;

&lt;p&gt;Keycloak is open solution tool which plays role of security in nosy system. For more information you can refer to docs, here we will cover configuration for nosy. First of all, we have to create realm which will be used as a security for NoSy. Please bear in mind, this configurations will directly affect configurations of nosy-admin which we did above. To create realm go to Keycloak admin page and on the left corner press add realm. let&amp;rsquo;s call our realm nosy-realm.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://notification-system.github.io/images/realm.png&#34; alt=&#34;Realm&#34; title=&#34;Realm&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After creation of realm you can see on the top left corner which realm you are currently in. Pick nosy-realm and let&amp;rsquo;s move to client creation for this realm. Click clients on the left side and press create on the right side of form. Here you should define Client id which can be nosy-client.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://notification-system.github.io/images/client.png&#34; alt=&#34;Client&#34; title=&#34;Client&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can leave name, description and login theme empty. You have to change the following fields: Enabled: On Client protocol: openid-connect Access Type: confidential Standard Flow Enabled: On Direct Access Grant Enabled: On Others can be off, because of confidential client please add valid redirect url which is basically your nosy-gui host(For localhost it will be &lt;a href=&#34;http://localhost:4200&#34;&gt;http://localhost:4200&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://notification-system.github.io/images/client1.png&#34; alt=&#34;Client1&#34; title=&#34;Client1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After the creation of client we should create the client role. Press Roles under the nosy-client(Not Roles on the left side of the page, but inside the client there is a tab called roles). Click add role button and name it(For example nosy-role)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://notification-system.github.io/images/role.png&#34; alt=&#34;Role&#34; title=&#34;Role&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now go to users on the left side and then on the right side of the form click on Add User. Name our user, for example, admin-user and press save button. This will create an admin user for us. Then go to the credentials tab and set the password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://notification-system.github.io/images/user.png&#34; alt=&#34;User&#34; title=&#34;User&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then go inside the user we have just created and click role mappings tab. Click on Client roles and add everything under that to this user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://notification-system.github.io/images/role-mappings.png&#34; alt=&#34;Role Mappings&#34; title=&#34;Role Mappings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Keycloak Configurations is done. Now, according to our configurations for keycloak, let&amp;rsquo;s set all variables.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;KEYCLOAK_ADMIN_USER=xxxxxx
KEYCLOAK_ADMIN_PASSWORD=xxxxx
KEYCLOAK_CLIENT=xxxxx
KEYCLOAK_AUTH_URL=xxxxxxx
KEYCLOAK_REALM=xxxxxxxx
KEYCLOAK_CLIENT_SECRET=xxx-xxx-xxx-xxxxx-xxx
KEYCLOAK_AUTH_URL=http://xxxxxx/xxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-three&#34;&gt;&lt;strong&gt;Step Three&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&#34;postgres-and-kafka-configurations-for-nosy&#34;&gt;&lt;strong&gt;Postgres and Kafka configurations for NoSy&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;We will set up plain postgres and kafka if you have some authentication in kafka please add necessary fields in application properties. For kafka please download kafka version and zookeeper and install them. You can follow instructions here: kafka After installation, please verify that kafka is exposing port if you are running remotely. If you are running locally then you can just add kafka host and port to application properties. Otherwise add ip address and port of kafka:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;KAFKA_BROKER_URL=host:port&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The same steps follow for Postgres. Please download postgres and create a user which can be used in our application and then create db named: nosydb(you can create any other database, but make sure you specify in application.properties) You can follow instructions here: postgres After installation please verify that postgres is exposing port if you are running remotely. If you are running locally then you can just add postgres host and port to application properties. Otherwise add ip address and port of postgres:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DATASOURCE_URL=jdbc:postgresql://host:5432/nosydb
DATASOURCE_USERNAME=&amp;quot;username you created without quotes&amp;quot;
DATASOURCE_PASSWORD=&amp;quot;password without quotes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-four&#34;&gt;&lt;strong&gt;Step Four&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&#34;nosy-email-configuration&#34;&gt;&lt;strong&gt;NoSy Email Configuration&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Here we will configure only two things. Firstly, it is the kafka host port and NOSY_ADMIN_EMAIL_TOPIC which will be the same as the one previously mentioned in nosy-admin. Please refer to step 3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;KAFKA_BROKER_URL=host:port`
NOSY_ADMIN_EMAIL_TOPIC=&amp;quot;topic for reading emails without quotes&amp;quot;
KAFKA_CONSUMER_GROUP=&amp;quot;consumer group without quotes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second thing is username and password for default email you mentioned in nosy-admin. Please refer to Step 1. This is done because we don&amp;rsquo;t want to transmit your private email password through the network&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NOSY_FROM_ADDRESS=&amp;quot;default email without quotes&amp;quot;
NOSY_FROM_ADDRESS_PASSWORD=&amp;quot;default email password without quotes&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The configuration part is finished. Thank you!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Architecture</title>
      <link>http://notification-system.github.io/docs/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://notification-system.github.io/docs/architecture/</guid>
      <description>
        
        
        

&lt;h2 id=&#34;components&#34;&gt;&lt;strong&gt;Components&lt;/strong&gt;&lt;/h2&gt;

&lt;h4 id=&#34;welcome-to-architecture-page-of-nosy&#34;&gt;&lt;strong&gt;Welcome to architecture page of NoSy&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;NoSy consists of 2 main components, Kafka and PostgreSQL, as well as Keycloak for access control. You can see the architecture of NoSy in the picture bellow&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://notification-system.github.io/images/architecture.png&#34; alt=&#34;Architecture&#34; title=&#34;Architecture&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Release 1.0.0</title>
      <link>http://notification-system.github.io/docs/releases/release-1.0.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://notification-system.github.io/docs/releases/release-1.0.0/</guid>
      <description>
        
        
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Release 1.0.0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Sending Email through Yandex and Gmail as well as Default: the email can be sent from nosy domain&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Possibility to add templates for emails&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Possibility to connect several systems(Email, SMS, Push Notifications)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Possibility to create and save newsletters with recipients&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Security Provided by Keycloak&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Can be extended as part of other projects&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Provided Manual Send Options for checking email sender&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Search for Templates provided as part of the first release&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Usage</title>
      <link>http://notification-system.github.io/docs/usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://notification-system.github.io/docs/usage/</guid>
      <description>
        
        
        

&lt;p&gt;The first page of the system is Login Page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://notification-system.github.io/images/login.png&#34; alt=&#34;Login&#34; title=&#34;Login&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Every user should be registered before using the system. In this page we have two buttons Login or Register Now. If user hasn&amp;rsquo;t been registered yet, he/she should press Register Now button. Then the user will be redirected to the following page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://notification-system.github.io/images/register.png&#34; alt=&#34;Register&#34; title=&#34;Register&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-1-profile-management&#34;&gt;&lt;strong&gt;1.1 Profile Management&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;All users have profiles and they can delete their data from the system. For that user should press the avatar on top the right corner and go to the profile:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://notification-system.github.io/images/profile.png&#34; alt=&#34;Profile&#34; title=&#34;Profile&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-2-input-systems&#34;&gt;&lt;strong&gt;1.2 Input Systems&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Input Systems are the logical group of several user tools(SMS, Email, Pusher). By creating Input System user can map several tools to that input System. Logical groups can be defined as an example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Suppose you have a company A which uses Pusher and Email services of NoSy. Then your Input System will be e.g company_A and all your configurations regarding to this company will go under this input system&lt;/li&gt;
&lt;li&gt;If you have several companies then you create several input Systems and map them to respective email, SMS or push notifications.&lt;/li&gt;
&lt;li&gt;You can create, manage or delete Input Systems by pressing the respective button on the left of the screen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://notification-system.github.io/images/inputsystem.png&#34; alt=&#34;Input System&#34; title=&#34;Input System&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see we have two forms here The first form is fetching all input systems and you can change them if you need. The second form(on the right) is designed for creating input system. As you can see, to create an input system you just need a name. After successfully creating of input system, the next step is the creation of email template. To accomplish that we need to go to respective menu on the left and press Email.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://notification-system.github.io/images/template.png&#34; alt=&#34;Template&#34; title=&#34;Template&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the first form you can delete or update your template. On the right form you can create your template.For this you need to map it to some input system. Keep in mind that you cannot create an email template without creating an input system. Therefore, all email templates are mapped to input system. By finding your input system in the first row you can proceed with creation. Second row asks you about the name for template, this is a mandatory field and cannot be left empty. Then Provider, as we mentioned before NoSy supports sending messages from 3 systems: Gmail, yandex and default. If you choose Gmail you have to provide your Gmail account on the next step if you select Gmail but provide something different the default settings will be used. The same happens with yandex provider, if you want to send email from the system you have to provide yandex email address otherwise the system will pick the Default. Then we have to provide Subject which is also mandatory field. In Email To section you can provide as many addresses as you want splitting them by comma. For example: xxx@xxx.com, yyy@yyy.com and so on. Email CC is not mandatory but if you want to provide it you will have the same pattern as in Email To. And finally Nosy supports:&lt;/p&gt;

&lt;p&gt;Dynamic variables: you can define the text dynamically while sending or you can have static text. For example: The following is an example of static text:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Hi, My Name is AAA&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will be saved and when you next call this template to send it. The email you will gate:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Hi, My Name is AAA.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But you can also define dynamic text for that NoSy uses placeholders. The example of such text is following&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Hi, My Name is #{name}#&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here #{name}# is a dynamic variable and should be provided when the user actually wants to send an email. Bear in mind, that if you create a dynamic variable but do not provide it when sending the message, you will receive an error. You can also provide all the text while sending; for that you can create one dynamic variable:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#{text}#&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Mentioned above is a valid Email Text, it means you will provide text when you will be sending an email. In one text you can use several environment variables. NoSy can send html emails too. So if you provide in text the field html message it will be sent as an html email. The last part in our menu is Manual Send Email. Here you can test your template by actually sending it. To send it you have to provide Input System and Email Template name as well as login details of your email if you didn&amp;rsquo;t pick Default Provider. Nosy doesn&amp;rsquo;t log any username and password; for this reason every time you send an email you have to provide them. And final note: if you have dynamic variables you have to specify the name and the value of these variables.&lt;/p&gt;

&lt;h4 id=&#34;1-3-e-mail-groups&#34;&gt;&lt;strong&gt;1.3 E-mail Groups&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;The back end supports creating e-mail groups instead of inputting the e-mail addresses one by one. The end points are described in the Swagger documentation. There are two end points for creating a group, one where you input Base64-encoded data of the addresses, and one which takes a list of actual e-mail addresses as argument. For updating the addresses you can either use the PUT-call end point to replace the addresses, or the PATCH-call to add new ones.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>